(in-package :sudoku)

(defparameter *grid* #2A((1 0 0 0 0 4 0 0 5)
			 (0 0 0 9 5 0 0 8 0)
			 (0 0 0 0 0 3 0 9 0)
			 (0 0 5 0 0 2 0 0 4)
			 (0 0 1 0 6 0 7 0 0)
			 (7 0 0 3 0 0 2 0 0)
			 (0 6 0 5 0 0 0 0 0)
			 (0 8 0 0 1 6 0 0 0)
			 (5 0 0 2 0 0 0 0 7)))

(defun affichage (grid)
  (format t "   | A B C | D E F | G H I |~%")
  (format t "****************************~%")
  (dotimes (i 9)
    (if (and (> i 0) (= (mod i 3) 0))
	(format t "****************************~%"))
    (format t " ~A | " (1+ i))
    (dotimes (j 9)
      (if (and (> j 0) (= (mod j 3) 0))
	  (format t "| "))
      (if (zerop (aref grid i j))
	  (format t "  ")
	  (format t "~A " (aref grid i j)))
      (if (= j 8)
	  (format t "|~%"))))
  (format t "****************************~%"))

(defparameter *g* (make-instance 'grille :grid *grid*))

(defun testsudo (tab)
  (initgrille *g* tab))

(defun sudoku (grid)
  (affichage grid)
  (format t "L C Value?")
  (let ((ligne (read))
	(colonne (read))
	(valeur (read)))
    (setf (aref grid (1- ligne) (1- colonne)) valeur)
    (affichage grid)))
